<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walk_right_speed = 2.5;
half_way = false;
x_change = 0; 
y_change = 0;
x_position = x;
audio_listener_position(x, y, 0);

//show_debug_message(string(x));

scr_fsm_create();
// test
//next_state = "st_stand";
// real
next_state = "st_sleep";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (  scr_fsm_check_state_change() == true ){
    if ( x_change != 0 ){ x += x_change; x_change = 0;}
    if ( y_change != 0 ){ y += y_change; y_change = 0;}
}

switch ( current_state ){
    case "st_sleep": st_player_sleep();
        break;
    case "st_wake_up": st_player_wake_up();
        break;
    case "st_get_up": st_player_get_up();
        break;
    case "st_stand": st_player_stand();
        break;
    case "st_walk_right": st_player_walk_right();
        break;
    case "st_fall_and_throw_up": st_player_fall_and_throw_up();
        break;
    case "st_stand_up_from_throw_up": st_player_stand_up_from_throw_up();
        break;
    case "st_eat_fruit_from_mini_fridge": st_player_eat_fruit_from_mini_fridge();
        break;
    case "st_exit": st_slide_down_exit();
        break;
}

state_time += 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if player touches object that has a gate and its gate type is "touch" change level
//show_debug_message( other.gate );
if ( other.gate != "none" and obj_game_master.state_time &gt; room_speed * 3){
    if ( other.gate_type == "touch" and other.touched_player == false ){
        obj_game_master.next_state = other.gate;
        other.touched_player = true;
        
        if ( other.gate == "outside" ){
            x_destination = 110;
            next_state = "st_fall_and_throw_up";
        } else if ( other.gate == "start_house" ){
            next_state = "st_sleep";
        }
    }
    else if ( other.gate_type == "wait" and current_state = "st_stand" and state_time &gt;= 60 ){
        obj_game_master.next_state = other.gate;
        other.touched_player = true;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( current_state == "st_stand" and next_state == "none" ){

    next_state = "st_walk_right";
}

if ( current_state == "st_sleep"  and instance_number(obj_start_background) == 0){
    wake_up_trigger = true;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( x &gt; room_width ){
    obj_game_master.next_state = "start_repeat";
    //obj_game_master.repeated = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( current_state == "st_walk_right" and next_state == "none" ){

    next_state = "st_stand";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
