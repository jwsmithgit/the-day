<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> // locals
var current_object, current_level; //map_object_name


// get name of level from state for the starting level
start_level = obj_game_master.current_state;

// grabbing object map from database:
// obj_ and level name is pre-appended to object name
// st_ is pre-appended current level state
current_object = string_copy(string(object_get_name(object_index)),string_length("obj_")+1, string_length(string(object_get_name(object_index)))-string_length("obj_"));
current_level = obj_game_master.level_name;

map_object_name = string_copy(current_object, string_length(current_level+"_")+1, string_length(current_object)-string_length(current_level)-1);
map = ds_map_find_value( obj_game_master.current_level, map_object_name);


scr_fsm_create();
// if enter state exists, set object state to that
if ( ds_map_find_value(map, "st_enter") != 0 ){
    next_state = "st_enter";
}
// if it doesn't exist, enter neutral state
else { next_state = "st_neutral" }


// get the items left movement from map
if ( ds_map_find_value(map, "x_move") != 0 ){
     x_move = ds_map_find_value(map, "x_move");
} 
// if none found, must be zero (object never moves)
else{ x_move = 0; }


// get the items drift left, item will still move if player is standing still
// applies to clouds, people, etc.
if ( ds_map_find_value(map, "x_drift") != 0 ){
    x_drift = ds_map_find_value(map, "x_drift");
} 
// if none found, must be zero
else{ x_drift = 0; }

depth = ds_map_find_value(map, "depth");

touched_player = false;
// get the objects gate
var object_depth = ds_map_find_value( map, "depth" );
// level map
var level_map = ds_map_find_value( obj_game_master.level_map, current_level );
// gate list
gate_list = ds_map_find_value( level_map, "xgate_" + string(object_depth));
// xposition_list
xposition_list = ds_map_find_value( level_map, "xposition_" + string(object_depth));
xobject_list = ds_map_find_value( level_map, "xobject_" + string(object_depth));
gate = "none"
for ( i = 0; i &lt; ds_list_size(xobject_list); i++ ){
    if ( map_object_name == ds_list_find_value(xobject_list, i)){
        gate = ds_list_find_value( gate_list, i);
        break;
    }
}
if ( gate != "none" ){ 
    gate_type = ds_map_find_value(map, "gate_type")
}
    

scr_fsm_check_state_change(self);
scr_execute_current_state();
// moves object left by move speed
scr_all_states_step();
state_time += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// check if the level has changed
// if so, enter exit state
if ( obj_game_master.level_name != start_level and current_state!="st_exit"){
    // find what the next state script is
    next_state = "st_exit";
    // increase depth by 1
    depth+=1;
}

scr_fsm_check_state_change();

scr_execute_current_state();

// moves object left by move speed
scr_all_states_step();

state_time += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x+sprite_width-sprite_xoffset &lt; 0 or y-sprite_yoffset &gt; room_height and current_state = "st_exit" or y+sprite_height-sprite_yoffset &lt; 0 and current_state = "st_exit"){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
