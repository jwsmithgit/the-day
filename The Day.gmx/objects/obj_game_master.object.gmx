<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// START OF ENTIRE GAME

// for testing levels spawn player middle
// test
walking_floor = room_height*4/5;
instance_create(room_width*1/5, walking_floor - sprite_get_height(spr_player_stand) + 20, obj_player);

//instance_create(room_width-64, room_height-56-4-32, obj_error);
//instance_create(room_width-149, room_height-56, obj_rhl);

//random_set_seed("seed");
//randomize();
scr_create_data();

scr_fsm_create();
next_state = "start";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if backspace is pressed, exit game.
/*if ( keyboard_check_pressed( vk_backspace )){
    game_end(); 
}*/

// check if the level has changed
// if it has spawn the new level
if ( scr_fsm_check_state_change()){    
    
    // get name of level from state
    level_name = current_state;
    // set distances
    if ( level_name == "start" ){
        total_distance = 0;
    } 
    level_distance = 0;
    // get level map for game master
    current_level = ds_map_find_value(level_map, level_name);
    // is this level a scrolling level?
    scrolling_level = ds_map_find_value( current_level, "scrolling_level" );
    // spawns all objects on screen
    scr_start_level(level_name);
}


if ( spawn_rest == true ){
    scr_create_data_2();
    spawn_rest = false;
}

if ( obj_player.current_state = "st_walk_right" and obj_player.half_way == true and current_state != "start_house" and total_distance &lt;= ds_map_find_value(current_level, "level_length")){
    level_distance += player_speed;
    total_distance += player_speed;
    //show_debug_message("TOTAL_DISTANCE" + string(total_distance));
    if ( total_distance &gt; ds_map_find_value(current_level, "level_length")) {
        total_distance = ds_map_find_value(current_level, "level_length");
    }
    if ( level_distance &gt; ds_map_find_value(current_level, "level_length")) {
        level_distance = ds_map_find_value(current_level, "level_length");
    } 
    
    scr_check_spawn(level_name);
}
state_time += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if backspace is pressed, exit game.
//game_end(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
